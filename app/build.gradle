apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'//增加这一句

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.myself.appdemo"
        minSdkVersion 18
        targetSdkVersion 25
        versionCode 5
        versionName "2.2"
        multiDexEnabled true
        renderscriptTargetApi 20
        renderscriptSupportModeEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        ndk {
            abiFilters "armeabi"/*, "armeabi-v7a", "x86"*/
        }
//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//            }
//        }
    }
//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }
    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
        destinationDir file("$projectDir/libs")
        baseName "Native_Libs"
        extension "jar"
        from fileTree(dir: "libs", include: "**/*.so")
        into "lib"
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(nativeLibsToJar)
    }
    signingConfigs {
        release {
            storeFile file("../appdemo.jks")
            storePassword "123456"
            keyAlias "appdemo"
            keyPassword "123456"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    //源码集
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/db-gen']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets']
            res.srcDirs = ['src/main/res']
        }
    }
    dexOptions {
        javaMaxHeapSize "2g"
    }
    //产品渠道配置
    productFlavors {
        local_release { versionName = "V" + defaultConfig.versionName }
//        local_debug { versionName = "D" + defaultConfig.versionName }
//        channel_baiduzhushou { versionName = "V" + defaultConfig.versionName }
//        channel_360 { versionName = "V" + defaultConfig.versionName }
//        channel_yingyongbao { versionName = "V" + defaultConfig.versionName }
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support:multidex-instrumentation:1.0.1') {
        exclude group: 'com.android.support', module: 'multidex'
    }
    compile project(':mylibrary')
    compile project(':youku_player_open_sdk')
    compile(name: 'ijkplayer-java-release', ext: 'aar')
    //增加这一句
    compile 'com.alipay.euler:andfix:0.5.0@aar'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
}
//编译结束后删除unaligned包
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            println "aligned " + output.outputFile
            println "unaligned " + output.packageApplication.outputFile

            File file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                println "deleting " + file.getName()
                file.delete()
            }
        }
    }
}